public class SinglyLinkedList {

	Node head;

	static class Node {
		int data;
		Node next;

		Node(int data) {
			this.data = data;
			this.next = null;
		}
	}

	public void printList() {
		Node n = head;
		while (n != null) {
			System.out.print(n.data);
			System.out.print(" ");
			n = n.next;
		}

		System.out.println();

	}

	public void insertAtBegin(int data) {
		Node newNode = new Node(data);
		newNode.next = head;
		head = newNode;
	}

	public void insertAfterAGivenNode(Node prev_Node, int data) {
		if (prev_Node == null) {
			System.out.println("prev node cannot be null");
		} else {
			Node newNode = new Node(data);
			newNode.next = prev_Node.next;
			prev_Node.next = newNode;
		}
	}

	public void insertAtEnd(int data) {
		if (head == null) {
			head = new Node(data);
		}
		Node newNode = new Node(data);
		newNode.next = null;
		Node n = head;
		while (n.next != null) {
			n = n.next;
		}
		n.next = newNode;
	}

	public void deleteTheFirstOccurrenceOfData(int data) {
		Node prev_node = null;
		Node n = head;
		if (n != null && n.data == data) {
			head = n.next;
		}
		while (n != null && n.data != data) {
			prev_node = n;
			n = n.next;
		}
		if (n == null)
			return;
		prev_node.next = n.next;
		n.next = null;
	}

	public void deleteANodeAtAGivenPosition(int position) {
		Node prev_node = null;
		Node n = head;
		if (position == 0) {
			head = n.next;
		}
		int count = 0;
		while (n != null) {
			count++;
			if (count == position) {
				prev_node.next = n.next;
				n.next = null;
			}
			prev_node = n;
			n = n.next;
		}
	}
	
	public Node insertInMid(Node head, int data){
        Node n = head;
        if(head == null){
            head = new Node(data);
        }
        int len = 0;
        while(n != null){
            len++;
            n = n.next;
        }
        int count = ((len % 2) == 0) ? (len / 2) : (len + 1) / 2; 
        Node newNode = new Node(data);
        n = head;
        while(count-- > 1){
            n = n.next;
        }
        newNode.next = n.next;
        n.next = newNode;
        return head;
    }
	

	public static void main(String[] args) {
		SinglyLinkedList sll1 = new SinglyLinkedList();
		sll1.head = new Node(1);
		Node second = new Node(2);
		sll1.head.next = second;
    sll.insertAtBegin(4);
		sll1.insertAtEnd(3);
		sll1.insertAtEnd(4);
		sll1.insertAtEnd(5);
		SinglyLinkedList sll2 = new SinglyLinkedList();
		sll2.head = new Node(1);
		Node secondl = new Node(2);
		sll2.head.next = secondl;
		sll2.insertAtEnd(3);
		sll2.insertAtEnd(4);
    sll2.insertAtEnd(5);
    sll.deleteTheFirstOccurrenceOfData(2);
		sll1.printList();
		sll2.printList();
    sll.deleteANodeAtAGivenPosition(3);
    sll.printList();
		

	}

}
